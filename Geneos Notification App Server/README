Notification Application Control Server
****************************************
Connor Morley					 2015/16

Versions
********
(1.3.1) Release notes: 

Log file rollover value implemented - Feature
Different log levels available - Feature
Server handles OA cluster/node bounce - Bug fix
 
(1.3) Release notes:

Reload App and remove DV causes multiple removal intermittently - Bug fix
Removal of DV immediately after snoozing causing crash - Bug fix
Users not being correctly removed from monitoring threads in server causing app reload issues - Bug fix
Add DV, restart Server and app, remove same DV, no removal takes place - Bug fix
Logout then back-button results in deadlocked main menu - Bug fix
Push of Addition/Removal of monitored dataviews across all logged in devices for that account - Feature
Revision number added to login screen - Feature
Port and Server IP address configurable - Feature
SSL Encryption installed and configurable - Feature

Information
***********
Me and Daniel built an Android application which linked into Geneos using Open Access which was designed to display current severity levels of specified dataviews within a gateway as well as allow limited command functionality (snooze). I was primarily responsible for the server side of the application which involved the Open Access interface, user management, device communication management/organisation, database configuration and scripting and (when appropriate) cross device updates. I also was involved in the Android application and managed the device interface with the server, login processing and some of the data handling. 

The server was build using the Spring Bootloader which is an extremely useful Java based tool which allows the construction of Tomcat servers much quicker than doing it manually. In this case I configured a RESTFUL server which means that the server could receive requests through http/s with associated data and then return requested data. To configure a Spring server you will need the Spring Tool Suite which is their specific IDE which has been build upon Eclipse, this can be downloaded here:

https://spring.io/tools/sts/all

For the Android side of the project you must use the Android Studio which was built upon IntelliJ which can be downloaded here: 

https://developer.android.com/studio/index.html


For communication to the Android application using PUSH notifications, where the server issues the message rather than the Application having to poll for data, I used the Google Cloud Messaging (GCM) service. Full information on download and configuration can be found here: 

https://developers.google.com/cloud-messaging/

 

I tried to make the source code as organised and developer friendly as possible and have broken the code into packages of controllers, objects, loggers and threads. As the server monitoring is multi-threaded there is a complicated thread handling system involved which had to be OpenAccess compatible. On occasion this required the system to have multiple layers of threads with child threads creating their own thread controllers resulting in a sort of tree structure which complains if not handled properly. By following the ThreadController class and its available methods the controlling mechanism should be clear, the only catch is when dealing with the Future objects and alteration of the Interrupt handling. In order to prevent overload of the server host it is essential that unused threads be terminated and their resources be released, in this situation this became difficult as a ThreadPool could not be terminated as a whole without disabling all monitoring. As a solution the threads were Callable and their instances recorded with Future objects referenced against the Xpath designated for the monitoring in that thread. When the monitoring was no longer needed (for instance no user is subscribed to that Xpath) the Future for that thread is called and "cancelled", this indicates to the system to interrupt the thread and terminate the Future. However, this cancellation is not a termination and only interrupts the thread and as such if the interrupt is not handled correctly there can be unpredictable behavior and retention of resources in zombie threads. In the Callable classes there are some seemingly repetitive cancellation sequences but which I found were necessary for stable functionality. Adaptation of the Callable class sections I would not recommend unless absolutely necessary, the ThreadInstace class however is fully adaptable as long as you adhere to the inherent dynamic understanding of the threads variables and underlying control variables.

By using OpenAccess as the interface, which at the time was the only real option, there were some inherent limitations which I have covered in the OpenAccess section of this handover. In this project this involved a multi-threaded polling system to OpenAccess that had to be able to detect changes without overloading the cluster and causing a crash. Although the server is built to handle a Cluster being disconnected and reconnected without crashing, should the cluster fail as a result of the application server this would have been a severely limiting issue. In order to circumvent this I disregarded the callback method and instead implemented scheduled sampling with the results being checked against a store of previous values. This primarily involved forcing the OpenAccess call to be cancelled after collecting data instead of remaining open for further changes, I did this by using the CountDownLatch which I have explained in detail in the OA section.

The GCM seems complex but is only made up of around three sections, the Key generation in the Android Application for the specific application in the Google cloud system, transmissions from the server to google using the Applications identification Key and finally the listener services that need to be enabled and configured on the device. It is worth noting at this point that this communication method uses only the JSON format so you must be familiar and comfortable with its use. For the application side of the GCM there are code snippets and walkthroughs provided in the link above. For most modern Android devices the application side is mostly just a plug and play job where the only adaptation needed is the inclusion of the correct configuration file (provided for you application in the link with how to include it) and the initiation of the services on application startup (and inclusion in the manifest as explained in the link).

The GUI functionality and data handling/processing on the Android application was Daniels main focus and any directions related should be directed to him.  